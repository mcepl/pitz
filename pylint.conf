# pylint.conf
# Project configuration for Pylint static code checker.
# Manpage: pylint(1)

[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Performance-profiled execution?
profile=no

# Add <file or directory> to the black list. It should be a base name,
# not a path. You may set this option multiple times.
ignore=CVS

# Pickle collected data for later comparisons?
persistent=yes

# Set the cache size for astng objects.
cache-size=500

# List of plugins (as comma separated values of python modules names)
# to load, usually to register additional checkers.
load-plugins=


[MESSAGES CONTROL]

# Enable only checker(s) with the given id(s). This option conflicts
# with the disable-checker option
# (comma-separated list)
#enable-checker=

# Enable all checker(s) except those with the given id(s). This option
# conflicts with the enable-checker option.
# (comma-separated list)
#disable-checker=

# Enable all messages in the listed categories (IRCWEF).
# (comma-separated list)
#enable-msg-cat=

# Disable all messages in the listed categories (IRCWEF).
# (comma-separated list)
disable-msg-cat=I

# Enable the message(s) with the given id(s).
#enable-msg=

# Disable the message(s) with the given id(s).
disable-msg=


[REPORTS]

# Set the output format.
# Available formats are text, parseable, colorized, msvs (visual
# studio) and html
output-format=text

# Include message's id in output?
include-ids=no

# Put messages in separate files for each specified module?
# Reports (if any) will be written in a file name
# "pylint_global.[txt|html]".
files-output=no

# Display a full report following the messages?
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectivly contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (R0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Add a comment according to your evaluation note?
# This is used by the global evaluation report (R0004).
comment=no

# Enable the report(s) with the given id(s).
#enable-report=

# Disable the report(s) with the given id(s).
#disable-report=


# checks for
# * unused variables / imports
# * undefined variables
# * redefinition of variable from builtins or from an outer scope
# * use of variable before assigment
# 
[VARIABLES]

# Check for unused import in __init__ files?
init-import=no

# A regular expression matching dummy (deliberately-unused) names.
dummy-variables-rgx=_|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=


# checks for :
# * doc strings
# * modules / classes / functions / methods / arguments / variables name
# * number of arguments, local variables, branchs, returns and statements in
# functions, methods
# * required module attributes
# * dangerous default values as arguments
# * redefinition of function / method / class
# * uses of the global statement
# 
[BASIC]

# Required attributes for module.
# (comma-separated list)
required-attributes=

# Regular expression which should only match functions or classes name
# which do not require a docstring
no-docstring-rgx=__.*__

# Regular expression which module names should match.
module-rgx=(([a-z_][a-z0-9_]+)|([A-Z][a-zA-Z0-9]+))$

# Regular expression which module level names should match.
const-rgx=(([A-Z_][A-Z0-9_]+)|([a-z_][a-z0-9_]+)|(__[a-z0-9_]+__))$

# Regular expression which class names should match.
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Regular expression which function names should match.
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which method names should match.
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which instance attribute names should match.
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which argument names should match.
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which variable names should match.
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Regular expression which correct list comprehension / generator
# expression variable names should match.
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Good variable names which should always be accepted.
# (comma-separated list)
good-names=i,j,k,exc,fd,_

# Bad variable names which should always be refused.
# (comma-separated list)
bad-names=foo,bar,baz,toto,tutu,tata

# List of builtins function names that should not be used.
# (comma-separated list)
bad-functions=map,filter,apply,input


# try to find bugs in the code using type inference
# 
[TYPECHECK]

# Ignore missing members accessed in mixin class?
# A mixin class is detected if its name ends with "mixin" (case
# insensitive).
ignore-mixin-members=yes

# List of classes names for which member attributes should not be
# checked (useful for classes with attributes dynamicaly set).
# (comma-separated list)
ignored-classes=

# Add a predefined set of Zope acquired attributes to
# generated-members?
zope=no

# Members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E0201 when accessed.
# (comma-separated list)
generated-members=REQUEST,acl_users,aq_parent


# checks for
# * external modules dependencies
# * relative / wildcard imports
# * cyclic imports
# * uses of deprecated modules
# 
[IMPORTS]

# Deprecated modules which should not be used.
# (comma-separated list)
deprecated-modules=regsub,string,TERMIOS,Bastion,rexec

# Create a graph of all (i.e. internal and external) dependencies in
# the specified file (report R0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the specified file.
# (report R0402 must not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the specified file.
# (report R0402 must not be disabled)
int-import-graph=


# checks for sign of poor/misdesign:
# * number of methods, attributes, local variables...
# * size, complexity of functions, methods
# 
[DESIGN]

# Maximum number of arguments for a function.
max-args=5

# Maximum number of locals for function body.
max-locals=15

# Maximum number of return / yield for function body.
max-returns=2

# Maximum number of branches for function body.
max-branchs=12

# Maximum number of statements in function body.
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Minimum number of public methods for a class (see R0903).
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20


# checks for :
# * methods without self as first argument
# * overridden methods signature
# * access only to existant members via self
# * attributes not defined in the __init__ method
# * supported interfaces implementation
# * unreachable code
# 
[CLASSES]

# Interface methods to ignore. This is used for instance to not check
# methods defines in Zope's Interface base class.
# (comma-separated list)
ignore-iface-methods=deferred,extends,names,is_implemented_by

# List of method names used to declare (i.e. assign) instance attributes.
# (comma-separated list)
defining-attr-methods=__init__,__new__,setUp,set_up


# checks for similarities and duplicated code. This computation may be
# memory / CPU intensive, so you should disable it if you experiments some
# problems.
# 
[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities?
ignore-comments=yes

# Ignore docstrings when computing similarities?
ignore-docstrings=yes


# checks for :
# * unauthorized constructions
# * strict indentation
# * line length
# * use of <> instead of !=
# 
[FORMAT]

# Maximum number of characters on a single line.
max-line-length=79

# Maximum number of lines in a module.
max-module-lines=1000

# String used as indentation unit.
# This is usually "    " (4 spaces) or "\t" (1 tab).
indent-string='    '


# checks for:
# * warning notes in the code like FIXME, XXX
# * PEP 263: source code with non ascii character but no encoding declaration
# 
[MISCELLANEOUS]

# List of note tags to take in consideration.
# (comma-separated list)
notes=FIXME,XXX,TODO

