components: []
created_by: &id002 !!python/object:uuid.UUID
  int: 217356799640352244068158184369341070513
created_time: &id001 2010-11-06 15:22:57.792583
description: "Right now, the webapp code is a mess, mostly because I've been just\n\
  writing tests\n\nI want the wsgi-app object to just dispatch/proxy calls to other\
  \ things,\nsort of like::\n\n    class SimpleWSGIApp(object):\n\n        def __init__(self,\
  \ project, handlers, no_handler_found):\n\n            self.project = project\n\
  \            self.handlers = handlers\n            self.no_handler_found = no_handler_found\n\
  \n        def __call__(self, environ, start_response):\n\n            h = self.handlers.get(\n\
  \                environ,\n                self.no_handler_found)\n\n          \
  \  return h(environ, start_response)\n\nSo, each handler would be a WSGI app in\
  \ itself.\n\nAny code that wants to set server headers needs to call start_response.\n\
  So, people do fancy stuff with wrapping callables or providing some\nother method,\
  \ but I think this is going to work OK.\n\nThe AppEngine webapp framework offers\
  \ access to headers and status codes\nby attaching these to self.\n\nI guess people\
  \ really hate seeing this at the end of every handler::\n\n    start_response[(status,\
  \ headers)]\n    return [t.render()]"
estimate: !!python/object:uuid.UUID
  int: 207205260775652781422748338617572801073
milestone: !!python/object:uuid.UUID
  int: 286057988816149038667284962231564097114
modified_time: *id001
owner: *id002
pscore: 0
status: !!python/object:uuid.UUID
  int: 327359014471868074244219043980996376403
tags:
- !!python/object:uuid.UUID
  int: 162106955348893831939149234360796181164
- !!python/object:uuid.UUID
  int: 115897731472495632588122822348854247787
- !!python/object:uuid.UUID
  int: 116377909236696500232003487119181129214
title: Reorganize webapp to use dispatchers and handers
type: task
uuid: !!python/object:uuid.UUID
  int: 20799386366191374337761671670861332691
yaml_file_saved: 2010-11-06 15:22:57.868047
